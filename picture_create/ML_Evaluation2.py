import matplotlib.pyplot as plt
import numpy as np


plt.legend(loc='lower right')
#无法显示负号
plt.rcParams['axes.unicode_minus'] = False

config = {
    "font.family": 'serif',
    "font.serif": ['simsun', 'Times New Roman'],
    "font.size": 12,
    "mathtext.fontset": 'stix',
}
plt.rcParams.update(config)
start = 3
end = 15
x = np.arange(start, end+1, 1)
mark = ""
def plotScores(scores, color, label, linestyle):
    Accuracy = scores[:, 0]
    Precision = scores[:, 1]
    Recall = scores[:, 2]
    F1 = scores[:, 3]
    mark = ""

    plt.subplot(2,2,1)
    # plt.ylim(0.6, 1)
    setSubPlot(Accuracy, "准确率", label, linestyle)

    plt.subplot(2,2,2)
    plt.ylim(0.7, 1)
    setSubPlot(Precision, "精确率", label, linestyle)

    plt.subplot(2,2,3)
    plt.ylim(0.25, 1)
    setSubPlot(Recall, "召回率", label, linestyle)

    plt.subplot(2,2,4)
    plt.ylim(0.25, 1)
    setSubPlot(F1, "F1点数", label, linestyle)

def setSubPlot(scores, ylabel, label, linestyle):
    plt.xlabel("数据包个数")
    plt.ylabel(ylabel)
    plt.grid(axis='y', linestyle='dashdot')
    plt.xticks(np.arange(start, end+1, 1))
    plt.plot(x, scores, marker = mark, color = color, label = label, linestyle = linestyle)

values = { 
    '#1f77b4': {
        'scores': np.array([
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
			[0.973110,0.717591,0.097031,0.170083],
            [0.991570,0.926742,0.761847,0.835892],
            [0.980132,0.930845,0.849850,0.888131],
            [0.975520,0.869290,0.860964,0.864737],
            [0.915927,0.738635,0.731030,0.734156],
            [0.943466,0.803116,0.892206,0.845097],
            [0.949723,0.918296,0.813940,0.862820],
            [0.958573,0.902762,0.875654,0.888699],
            [0.955110,0.918631,0.844002,0.879306],
            [0.967352,0.944656,0.879015,0.910260],
            [0.965194,0.929293,0.860213,0.892812],
            [0.958962,0.865980,0.869757,0.867315],
            [0.962200,0.860529,0.882904,0.871155],
            [0.965426,0.908280,0.846026,0.875376],
            [0.970246,0.953822,0.823116,0.883118],
            [0.983729,0.936765,0.921561,0.928284],
            [0.984125,0.943246,0.903155,0.921530],
            [0.991733,0.973522,0.939380,0.955841],
            [0.994663,0.979455,0.958012,0.968141],
            [0.992964,0.975640,0.917696,0.944736],
            [0.997205,0.979785,0.974089,0.976012],
            [0.997419,0.975465,0.977965,0.975942],
            [0.996284,0.981748,0.951280,0.965701],
        ]),
        'treeType': 'ID3',
        'linestyle': '--',
    },
    '#ff7f0e': {
        'scores': np.array([
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0.972040,0.704723,0.086278,0.153149],
            [0.991351,0.877990,0.815817,0.845319],
            [0.942023,0.725196,0.589890,0.650049],
            [0.962531,0.782894,0.805792,0.793712],
            [0.932131,0.784842,0.806499,0.794626],
            [0.933489,0.815392,0.782916,0.798467],
            [0.952282,0.936025,0.809345,0.867704],
            [0.954107,0.906701,0.843212,0.873243],
            [0.957469,0.925062,0.846193,0.883479],
            [0.959704,0.908912,0.878060,0.892748],
            [0.963693,0.917742,0.859959,0.887128],
            [0.960472,0.882440,0.862852,0.871901],
            [0.959800,0.873028,0.863121,0.867199],
            [0.974043,0.928444,0.884013,0.905291],
            [0.978523,0.959267,0.881689,0.918209],
            [0.979572,0.950022,0.881798,0.913885],
            [0.982625,0.947102,0.894192,0.919497],
            [0.990400,0.950819,0.943364,0.946312],
            [0.991994,0.949292,0.954930,0.951341],
            [0.953892,0.692868,0.693735,0.689045],
            [0.961957,0.659058,0.782802,0.711594],
            [0.969516,0.786639,0.658142,0.710912],
            [0.996791,0.993029,0.951434,0.970901],
        ]),
        'treeType': 'C4.5',
        'linestyle': '-', 
    },
    '#2ca02c': {
        'scores': np.array([
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
			[0.972421,0.650588,0.066769,0.120567],
            [0.990810,0.883715,0.781652,0.829115],
            [0.979651,0.922725,0.839105,0.878562],
            [0.976711,0.863212,0.878423,0.870424],
            [0.937181,0.798598,0.819684,0.808711],
            [0.955484,0.872173,0.864442,0.868036],
            [0.951798,0.915872,0.826708,0.868808],
            [0.951225,0.877880,0.865248,0.871241],
            [0.961242,0.927977,0.864918,0.895101],
            [0.962911,0.933297,0.866756,0.898553],
            [0.965548,0.930084,0.860367,0.893544],
            [0.966509,0.908064,0.872522,0.889276],
            [0.969000,0.910703,0.880477,0.894647],
            [0.966170,0.902634,0.858514,0.879637],
            [0.982550,0.957212,0.908483,0.932016],
            [0.983254,0.934003,0.924685,0.928782],
            [0.989000,0.957233,0.936329,0.945768],
            [0.988000,0.933608,0.937226,0.934095],
            [0.993539,0.970196,0.949956,0.959494],
            [0.994760,0.958205,0.966509,0.961305],
            [0.993478,0.979681,0.915673,0.945820],
            [0.992581,0.960402,0.913289,0.933765],
            [0.993919,0.956128,0.929338,0.941491],
        ]),
        'treeType': 'CART',
        'linestyle': '--', 
    }, 
    '#d62728': {
        'scores': np.array([
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
			[0.972901,0.687125,0.070505,0.127499],
            [0.991149,0.893109,0.787820,0.836784],
            [0.980494,0.936061,0.843415,0.887057],
            [0.978117,0.882750,0.869368,0.875631],
            [0.934628,0.793353,0.817079,0.804585],
            [0.954726,0.843420,0.906517,0.873469],
            [0.950346,0.941597,0.793696,0.861005],
            [0.958429,0.915050,0.859389,0.886008],
            [0.959119,0.930867,0.849190,0.887769],
            [0.965378,0.945040,0.867679,0.904339],
            [0.966254,0.940633,0.855322,0.895308],
            [0.963585,0.894967,0.875706,0.884771],
            [0.962800,0.886277,0.857329,0.870523],
            [0.971170,0.916853,0.876394,0.895649],
            [0.980872,0.968280,0.887416,0.925434],
            [0.983729,0.941678,0.919134,0.929602],
            [0.983250,0.935228,0.904819,0.918855],
            [0.991467,0.970566,0.946581,0.957904],
            [0.995365,0.977496,0.969540,0.973189],
            [0.994311,0.988838,0.932596,0.959364],
            [0.995497,1.000000,0.925285,0.960556],
            [0.996613,1.000000,0.943712,0.970162],
            [0.997128,0.995119,0.955765,0.974429],
        ]),
        'treeType': 'RF',
        'linestyle': '-', 
    }
}

for color, val in values.items():
    plotScores(val['scores'][start:end+1, :], color, val['treeType'], val['linestyle'])

plt.legend(bbox_to_anchor=(0,1),loc=(-3, 3),borderaxespad=0.4,ncol=4,)  #绘制表示框，右下角绘制

# plt.legend(loc=[1, 0], bbox_to_anchor=(1.05,1.05))
# for color, score in colors.items():
    # plt.legend(loc='lower right', title='入选阈值', prop = {'size':8})
    # pass

plt.legend(bbox_to_anchor=(1.035,2.75),borderaxespad=0.5,ncol=4,handlelength=3.3)  #绘制表示框，右下角绘制
plt.subplots_adjust(wspace = 0.35, hspace = 0.4)
# plt.tight_layout()
plt.savefig("ML_Evaluation_multi_{}-{}.pdf".format(start, end), bbox_inches = 'tight', dpi=800)
plt.show()